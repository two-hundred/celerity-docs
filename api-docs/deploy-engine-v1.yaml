openapi: 3.0.4
info:
  title: Deploy Engine API
  description: |-

    `v1` of the Deploy Engine HTTP API provides a set of endpoints for interacting with the Deploy Engine to validate and deploy blueprints used for Celerity applications and infrastructure-as-code.
    The API contains a mixture of resource-oriented RESTful endpoints, action-oriented RPC-style endpoints and event streaming endpoints.

    The API is designed in a way that a RESTful resource operation call is made to start a process such as validating a blueprint document or deploying a blueprint instance, where the state of the resource representing a process can be retrieved using a unique identifier. This resource ID can also be used to stream events as the underlying validation, change staging or deployment process is running.

    This API is intended to be used by trusted clients that represent server-side applications or applications running
    on the same host as the Deploy Engine (such as the Celerity CLI). To provide a service to end users, such as a Platform-as-a-Service offering, the Deploy Engine
    should be used as the core engine where the platform provides its own API layer to manage authorisation, multi-tenancy, versioning and long-term history.

    ### Connecting

    Version 1 of the Deploy Engine HTTP API can be connected to over TCP/IP using HTTP or HTTPS or over a Unix domain socket.
    Unix domain sockets are useful for instances of the Deploy Engine that are running on the same host as the client making the request, such as the default installation of Celerity where the Deploy Engine is running as a local process that the CLI communicates with.
    
    **Base URL:** 
    
    ```
    http(s)://{host}(:{port})(/{basePath})/v1
    ```
    
    A base URL in this format is used to access the Deploy Engine API over a network. For a unix domain socket, the only relevant part of the base URL is the version path prefix `/v1`, the scheme, host and port can be any value when making requests over a HTTP client that supports Unix domain sockets.
    
    `{host}` is the host name or IP address of the server running the Deploy Engine.
    
    `{port}` is the port number that the Deploy Engine is listening on. In most cases, this will be omitted as public instances of the Deploy Engine will be accessible over the default HTTPS port (`443`).
    
    `{basePath}` is the base path for the API, some deployments may provide a dedicated base path for the Deploy Engine API.

    In production environments, where the Deploy Engine is accessible over the public internet, the server running the Deploy Engine must use the `https` scheme to ensure that all data is encrypted in transit. This means that base URLs for Deploy Engine instances running in production should look something like this:
    
    ```
    https://api.deploy.celerityframework.io/v1
    ```
    
    ### Event Streams

    Validation, change staging and deployment processes are all asynchronous and can take a long time to complete, so the API provides stream endpoints that use [Server-Sent Events (SSE)](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events) to stream events from the Deploy Engine to the client as they occur. This allows clients to receive real-time updates on the progress of long-running processes.
    For stream endpoints, clients can send a `Last-Event-ID` header to the server to resume the stream from a specific event ID, allowing clients to reconnect to the stream and receive events that they may have missed while disconnected.

    When `Last-Event-ID` is not provided, the stream will start with recently queued events and current events or will end instantly if the last saved event was marked as an `end` event
    and there are no recently queued events.
    This means that if a connection drops off and the client reconnects without a `Last-Event-ID` header, there is a high possibility that duplicate events will be received.
    The client should check for duplicate events and handle them accordingly.
    The meaning of "recently queued events" is dependent on the configuration of the Deploy Engine instance, typically this will be events saved in the last 5 minutes.
    For blueprint instance deployments, where the same instance ID can be deployed multiple times, the next stream will become available as soon as the first event from the
    new deployment process has been received and saved.

    When making a request to one of the `*/events` stream endpoints, the Deploy Engine will queue events server-side if the client is not yet connected to the stream. This allows the client to receive events that have occurred in the time between the process starting and the client connecting to the stream. These events will be queued server-side and will be cleaned up after an amount of time that will be configured for the Deploy Engine instance.

    The endpoints to retrieve change sets and deployment instances are also provided to allow the client to retrieve the full picture of the current state of these entity types.
    Blueprint validation results are only available as events, so clients must build up a full picture of the validation results from the event stream.
    In most cases, the validation process will produce the same results for the same blueprint document, The exception to this would be upgrades of the deploy engine, plugins that fix bugs or change behaviour that
    would affect the validation results.

    `v1` of the Deploy Engine is not designed to be relied upon to retain long-term event history, clients are responsible for storing events that they receive from the stream endpoints if required. In order for this to be as reliable as possible, clients should properly implement usage of the `Last-Event-ID` header to resume the stream from a specific event ID to capture any missed events when reconnecting to the stream.
    
    If a request to a stream endpoint is made after the process has completed, events that have been retained server-side will be sent to the client in the order that they occurred.
    As events are cleaned up periodically depending on how the Deploy Engine is configured, as mentioned above, clients should not rely on the stream endpoints to provide a complete history of events for a process.

    ### Short-lived Resources
    
    Validation results and change sets are short-lived resources that are expected to be cleaned up after an amount of time that is configured for the Deploy Engine instance.
    This means that clients should not rely on these resources to be available indefinitely, these resources should be used shortly after the time of the action that created them.
    Clients can build their own layers on top of the Deploy Engine API to store these resources for longer periods of time if required.
    This could be useful for Platform-as-a-service offerings that want to provide a history of validation results or change sets for their users
    to view in their own UI with a longer retention period.

    ### Authenticating with the Deploy Engine
    
    The Deploy Engine HTTP API supports authentication using API keys, JWTs and the Celerity Signature v1. The authentication mechanism to use when making requests will depend on how the Deploy Engine is configured.

    `v1` of the Deploy Engine will attempt to authenticate requests using the following order of precedence:
    1. **JWT**: If the `Authorization` header is present, using the bearer scheme and contains a valid JWT, the JWT will be verified and used to authenticate the request. This will be skipped if an adequate OIDC/OAuth2 provider is not configured as the token issuer for the Deploy Engine instance.
    2. **Celerity Signature v1**: If the `Celerity-Signature-V1` header is present, using the Celerity Signature v1 format, the signature will be verified and used to authenticate the request. This will be skipped if the Deploy Engine instance is not configured with at least one key pair for the Celerity Signature v1 authentication mechanism.
    3. **API Key**: If the `Celerity-Api-Key` header is present, using the API key scheme and contains a valid API key, the API key will be used to authenticate the request. This will be skipped if the Deploy Engine instance is not configured with at least one API key for the API key authentication mechanism.
    
    See the [Authentication](/docs/auth/intro) documentation to read more about the authentication mechanisms supported by Celerity components including but not limited to the Deploy Engine.

  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
  version: "1.0"
externalDocs:
  description: Find out more about the Deploy Engine
  url: https://celerityframework.io/deploy-engine/docs/intro
servers:
  - url: "{protocol}://{host}/{basePath}/v1"
    variables:
      protocol:
        enum:
          - http
          - https
        default: https

tags:
  - name: Validation
    description: Endpoints for blueprint validation.
  - name: Deployments
    description: Endpoints for change staging and deployments.
  - name: Events
    description: Endpoints for managing events across validation, change staging and deployments.
paths:
  /validations:
    post:
      tags:
        - Validation
      summary: Create a Blueprint Validation
      description: |
        Create a blueprint validation. This will start a validation process for the provided blueprint
        document and return an ID that can be used to retrieve validation metadata or stream validation
        events as they occur.
      operationId: createBlueprintValidation
      parameters:
        - $ref: '#/components/parameters/celeritySignatureV1Param'
        - name: checkBlueprintVars
          in: query
          schema:
            type: boolean
            default: false
          description: |
            If set to `true` or `1`, the blueprint validation process
            will check that the provided blueprint variables are valid
            for the blueprint.
            By default, the blueprint validation process will not check the
            provided blueprint variables.
        - name: checkPluginConfig
          in: query
          schema:
            type: boolean
            default: false
          description: |
            If set to `true` or `1`, the blueprint validation process
            will check that the provided plugin configuration is valid
            against the plugin config schemas defined by the plugins
            installed for the Deploy Engine instance.
            By default, the blueprint validation process will not check the
            provided plugin configuration.

      requestBody:
        $ref: '#/components/requestBodies/CreateBlueprintValidationBody'
      responses:
        '202':
          description: Blueprint validation has been created and validation process will start soon.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlueprintValidation'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        '422':
          description: Uprocessable entity (input validation failed)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnprocessableEntityError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorisedError'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnexpectedError"
      security:
        - oauth_jwt: []
        - api_key: []

  /validations/{id}:
    get:
      tags:
        - Validation
      summary: Retrieve a Blueprint Validation
      description: |
        Retrieve the status of a blueprint validation. This will return the current status of the validation process.
        The events stream endpoint should be used to stream events (diagnostics) as they occur or that have recently occurred.
      operationId: getBlueprintValidation
      parameters:
        - $ref: '#/components/parameters/celeritySignatureV1Param'
        - name: id
          in: path
          required: true
          description: The ID of the blueprint validation.
          schema:
            type: string
            example: 16ef8989-af00-4a4a-8164-72493ceb1aa0
      responses:
        '200':
          description: The blueprint validation task.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlueprintValidation'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorisedError'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnexpectedError"
      security:
        - oauth_jwt: []
        - api_key: []

  /validations/{id}/stream:
    get:
      tags:
        - Validation
      summary: Stream Blueprint Validation Events
      description: |
        Stream events from a blueprint validation process.
        This will return a stream of events as they occur or that have recently occurred
        over the Server-Sent Events (SSE) protocol.
        The `Last-Event-ID` header can be used to resume the stream from a specific event ID.
      operationId: streamBlueprintValidationEvents
      parameters:
        - $ref: '#/components/parameters/celeritySignatureV1Param'
        - name: id
          in: path
          required: true
          description: The ID of the blueprint validation.
          schema:
            type: string
            example: 16ef8989-af00-4a4a-8164-72493ceb1aa0
        - name: Last-Event-ID
          in: header
          description: The ID of the last event received. This can be used to resume the stream from a specific event ID.
          required: false
          schema:
            type: string
            example: 60d7c6c5-3984-42b9-a3c1-ae8a47a9bf55
      responses:
        '200':
          description: |
            A server-sent event stream containing diagnostics from blueprint validation.
            The `data`, `event` and `id` represents fields in the SSE specification,
            this is not a JSON object.
            The `data` field contains the payload of the event, which is a serialised JSON object
            that contains the details of the blueprint validation event.

            For example, the event stream will look like this:
            ```plaintext
            event: diagnostic
            id: 60d7c6c5-3984-42b9-a3c1-ae8a47a9bf55
            data: {"message":"Incorrect blueprint version","level":1,"timestamp":1678901234,"end":false}

            event: diagnostic
            id: 62d3cac5-3984-42b9-a3c1-ae8a47a9bf33
            data: {"message":"Unsupported transform provided","level":2,"timestamp":1678901234,"end":true}
            ````
          content:
            text/event-stream:
              schema:
                type: object
                required:
                  - event
                  - id
                  - data
                properties:
                  event:
                    type: string
                    description: The name of the event type.
                    example: diagnostic
                    enum:
                      - diagnostic
                  id:
                    type: string
                    description: The ID of the event.
                    example: 60d7c6c5-3984-42b9-a3c1-ae8a47a9bf55
                  data:
                    $ref: '#/components/schemas/BlueprintValidationEvent'
                  
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorisedError'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnexpectedError"
      security:
        - oauth_jwt: []
        - api_key: []

  /validations/cleanup:
    post:
      tags:
        - Validation
      summary: Clean up Blueprint Validations
      description: |
        Clean up blueprint validations that are older than the retention period
        configured for the Deploy Engine instance.
      operationId: cleanUpBlueprintValidations
      parameters:
        - $ref: '#/components/parameters/celeritySignatureV1Param'
      responses:
        '202':
          description: Blueprint validation cleanup has been started.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CleanupStartedResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorisedError'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnexpectedError"
      security:
        - oauth_jwt: []
        - api_key: []

  /deployments/changes:
    post:
      tags:
        - Deployments
      summary: Create a Change Set (Stage Changes)
      description: |
        Create a change set for a blueprint deployment.
        This will start a change staging process for the provided blueprint
        document and return an ID that can be used to retrieve the change set
        or stream change staging events.

        If a valid instance ID or name is provided, a change set will be created
        by comparing the provided blueprint document with the current state of the existing
        blueprint instance.
  
        Creating a change set should be carried out in preparation for deploying new
        blueprint instances or updating existing blueprint instances.
      operationId: createChangeSet
      parameters:
        - $ref: '#/components/parameters/celeritySignatureV1Param'
      requestBody:
        $ref: '#/components/requestBodies/CreateChangeSetBody'
      responses:
        '202':
          description: Change set has been created and change staging process will start soon.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChangeSet'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        '422':
          description: Uprocessable entity (input or source blueprint validation failed)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnprocessableEntityError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorisedError'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnexpectedError"
      security:
        - oauth_jwt: []
        - api_key: []

  /deployments/changes/{id}:
    get:
      tags:
        - Deployments
      summary: Get a Change Set
      description: |
        Retrieve a change set for a blueprint deployment.
        This will return the current status of the change staging process.
        If complete, the response will include a full set of changes that will be applied
        when deploying the change set.
      operationId: getChangeSet
      parameters:
        - $ref: '#/components/parameters/celeritySignatureV1Param'
        - name: id
          in: path
          required: true
          description: The ID of the change set.
          schema:
            type: string
            example: 16ef8989-af00-4a4a-8164-72493ceb1aa0
      responses:
        '200':
          description: The change set.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChangeSet'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorisedError'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnexpectedError"
      security:
        - oauth_jwt: []
        - api_key: []

  /deployments/changes/{id}/stream:
    get:
      tags:
        - Deployments
      summary: Stream Change Staging Events
      description: |
        Stream events from the change staging process for the given change set ID.
        This will return a stream of events as they occur or that have recently occurred
        over the Server-Sent Events (SSE) protocol.
        The `Last-Event-ID` header can be used to resume the stream from a specific event ID.
      operationId: streamChangeStagingEvents
      parameters:
        - $ref: '#/components/parameters/celeritySignatureV1Param'
        - name: id
          in: path
          required: true
          description: The ID of the change set.
          schema:
            type: string
            example: 16ef8989-af00-4a4a-8164-72493ceb1aa0
        - name: Last-Event-ID
          in: header
          description: The ID of the last event received. This can be used to resume the stream from a specific event ID.
          required: false
          schema:
            type: string
            example: 60d7c6c5-3984-42b9-a3c1-ae8a47a9bf55
      responses:
        '200':
          description: |
            A server-sent event stream containing events from staging changes for a blueprint deployment.
            The `data`, `event` and `id` represents fields in the SSE specification,
            this is not a JSON object.
            The `data` field contains the payload of the event, which is a serialised JSON object
            that contains the details of the change staging event.

            For example, the event stream will look like this:
            ```plaintext
            event: resourceChanges
            id: 60d7c6c5-3984-42b9-a3c1-ae8a47a9bf55
            data: {"resourceName":"my-resource","removed":false,"new":false,"changes":{},"resolveOnDeploy":[],"conditionKnownOnDeploy":false,"timestamp":1678901234}

            event: childChanges
            id: 62d3cac5-3984-42b9-a3c1-ae8a47a9bf33
            data: {"childBlueprintName":"my-child-blueprint","removed":false,"new":false,"changes":{},"timestamp":1678901234}
            ````
          content:
            text/event-stream:
              schema:
                type: object
                required:
                  - event
                  - id
                  - data
                properties:
                  event:
                    type: string
                    description: The name of the event type.
                    example: resourceChanges
                    enum:
                      - resourceChanges
                      - childChanges
                      - linkChanges
                      - changeStagingComplete
                      - error
                  id:
                    type: string
                    description: The ID of the event.
                    example: 60d7c6c5-3984-42b9-a3c1-ae8a47a9bf55
                  data:
                    $ref: '#/components/schemas/ChangeStagingEvent'
                  
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorisedError'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnexpectedError"
      security:
        - oauth_jwt: []
        - api_key: []

  /deployments/changes/cleanup:
    post:
      tags:
        - Deployments
      summary: Clean up Change Sets
      description: |
        Clean up change sets that are older than the retention period
        configured for the Deploy Engine instance.
      operationId: cleanUpChangeSets
      parameters:
        - $ref: '#/components/parameters/celeritySignatureV1Param'
      responses:
        '202':
          description: Change set cleanup has been started.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CleanupStartedResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorisedError'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnexpectedError"
      security:
        - oauth_jwt: []
        - api_key: []

  /deployments/instances:
    post:
      tags:
        - Deployments
      summary: Create a Blueprint Instance (Deploy New)
      description: |
        Create a new blueprint deployment instance.
        This will start the deployment process for the provided blueprint
        document and change set.
        It will return a blueprint instance resource containing an ID that can be used to
        stream deployment events as they occur.
      operationId: createBlueprintInstance
      parameters:
        - $ref: '#/components/parameters/celeritySignatureV1Param'
      requestBody:
        $ref: '#/components/requestBodies/CreateBlueprintInstanceBody'
      responses:
        '202':
          description: Blueprint instance has been created and deployment process will start soon.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlueprintInstance'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        '422':
          description: Uprocessable entity (input or source blueprint validation failed)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnprocessableEntityError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorisedError'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnexpectedError"
      security:
        - oauth_jwt: []
        - api_key: []

  /deployments/instances/{id}:
    parameters:
      - $ref: '#/components/parameters/celeritySignatureV1Param'
      - name: id
        in: path
        required: true
        description: The ID or unique name of a blueprint instance.
        schema:
          type: string
          example: 16ef8989-af00-4a4a-8164-72493ceb1aa0
    patch:
      tags:
        - Deployments
      summary: Update a Blueprint Instance (Deploy Existing)
      description: |
        Updates an existing blueprint deployment instance.
        This will start the deployment process for the provided blueprint
        document and change set.
        It will return the current state of the blueprint instance, the same ID provided
        should be used to stream deployment events as they occur.
      operationId: updateBlueprintInstance
      requestBody:
        $ref: '#/components/requestBodies/UpdateBlueprintInstanceBody'
      responses:
        '202':
          description: Blueprint instance update deployment process will start soon.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlueprintInstance'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        '422':
          description: Uprocessable entity (input or source blueprint validation failed)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnprocessableEntityError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorisedError'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnexpectedError"
      security:
        - oauth_jwt: []
        - api_key: []

    get:
      tags:
        - Deployments
      summary: Get a Blueprint Instance
      description: |
        Retrieve a blueprint deployment instance.
        This will return the current status of the deployment
        along with the current state of the blueprint instance.
      operationId: getBlueprintInstance
      responses:
        '200':
          description: The blueprint instance.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlueprintInstance'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorisedError'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnexpectedError"
      security:
        - oauth_jwt: []
        - api_key: []

  /deployments/instances/{id}/exports:
    get:
      tags:
        - Deployments
      summary: Get Blueprint Instance Exports
      description: |
        Retrieve the exports from a blueprint deployment instance.
        This will return exported fields from the blueprint instance.
      operationId: getBlueprintInstanceExports
      parameters:
        - $ref: '#/components/parameters/celeritySignatureV1Param'
        - name: id
          in: path
          required: true
          description: The ID or unique name of a blueprint instance to get exports for.
          schema:
            type: string
            example: 16ef8989-af00-4a4a-8164-72493ceb1aa0
      responses:
        '200':
          description: The blueprint instance exports.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlueprintInstanceExports'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorisedError'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnexpectedError"
      security:
        - oauth_jwt: []
        - api_key: []

  /deployments/instances/{id}/destroy:
    post:
      tags:
        - Deployments
      summary: Destroy a Blueprint Instance
      description: |
        Destroys a blueprint deployment instance.

        This is a `POST` request as destroying a blueprint instance requires additional information
        beyond the ID of the instance to destroy and `DELETE` requests do not support request bodies.

        This will start the destroy process for the provided change set.
        It will return the current state of the blueprint instance, the same ID provided
        should be used to stream destroy events as they occur.
      operationId: destroyBlueprintInstance
      parameters:
        - $ref: '#/components/parameters/celeritySignatureV1Param'
        - name: id
          in: path
          required: true
          description: The ID or unique name of the blueprint instance to destroy.
          schema:
            type: string
            example: 16ef8989-af00-4a4a-8164-72493ceb1aa0
      requestBody:
        $ref: '#/components/requestBodies/DestroyBlueprintInstanceBody'
      responses:
        '202':
          description: Blueprint instance destroy process will start soon.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlueprintInstance'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorisedError'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnexpectedError"
      security:
        - oauth_jwt: []
        - api_key: []

  /deployments/instances/{id}/stream:
    get:
      tags:
        - Deployments
      summary: Stream Deployment Events
      description: |
        Stream events from the current deployment process for the given blueprint instance ID.

        This will stream events for new deployments, updates and for destroying a blueprint instance.
    
        This will return a stream of events as they occur or that have recently occurred
        over the Server-Sent Events (SSE) protocol.
        The `Last-Event-ID` header can be used to resume the stream from a specific event ID.

        For a blueprint instance that has been destroyed, this stream will no longer be available
        to new connections once the destroy process has been succesfully completed.
      operationId: streamDeploymentEvents
      parameters:
        - $ref: '#/components/parameters/celeritySignatureV1Param'
        - name: id
          in: path
          required: true
          description: The ID of the blueprint instance.
          schema:
            type: string
            example: 16ef8989-af00-4a4a-8164-72493ceb1aa0
        - name: Last-Event-ID
          in: header
          description: The ID of the last event received. This can be used to resume the stream from a specific event ID.
          required: false
          schema:
            type: string
            example: 60d7c6c5-3984-42b9-a3c1-ae8a47a9bf55
      responses:
        '200':
          description: |
            A server-sent event stream containing events for a blueprint instance deployment.
            The `data`, `event` and `id` represents fields in the SSE specification,
            this is not a JSON object.
            The `data` field contains the payload of the event, which is a serialised JSON object
            that contains the details of the change staging event.

            For example, the event stream will look like this:
            ```plaintext
            event: resource
            id: 60d7c6c5-3984-42b9-a3c1-ae8a47a9bf55
            data: {"instanceId":"16ef8989-af00-4a4a-8164-72493ceb1aa0","resourceId":"60d7c6c5-3984-42b9-a3c1-ae8a47a9bf55","resourceName":"my-resource","status":2,"preciseStatus":3,"group":1,"attempt":2,"canRetry":false,"updateTimestamp":1678901234,"durations":{"attemptDurations":[102,302.5],"totalDuration":404.5}}

            event: child
            id: 62d3cac5-3984-42b9-a3c1-ae8a47a9bf33
            data: {"parentInstanceId":"16ef8989-af00-4a4a-8164-72493ceb1aa0","childInstanceId":"02214a31-e507-4b5f-955d-dfac8f70e6a8","childName":"coreInfra","status":13,"updateTimestamp":1678901234}
            ````
          content:
            text/event-stream:
              schema:
                type: object
                required:
                  - event
                  - id
                  - data
                properties:
                  event:
                    type: string
                    description: The name of the event type.
                    example: resource
                    enum:
                      - resource
                      - child
                      - link
                      - instanceUpdate
                      - finish
                      - error
                  id:
                    type: string
                    description: The ID of the event.
                    example: 60d7c6c5-3984-42b9-a3c1-ae8a47a9bf55
                  data:
                    $ref: '#/components/schemas/DeploymentEvent'

        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorisedError'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnexpectedError"
      security:
        - oauth_jwt: []
        - api_key: []

  /events/cleanup:
    post:
      tags:
        - Events
      summary: Clean up Events
      description: |
        Clean up events that are older than the retention period
        configured for the Deploy Engine instance.

        This will clean up events for all processes including blueprint validations,
        change staging and deployments.
        This will not clean up the resources themselves, only the events that are associated
        with the resources.
        You can clean up change sets and blueprint validations using the dedicated endpoints.
      operationId: cleanUpEvents
      parameters:
        - $ref: '#/components/parameters/celeritySignatureV1Param'
      responses:
        '202':
          description: Change set cleanup has been started.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CleanupStartedResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorisedError'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnexpectedError"
      security:
        - oauth_jwt: []
        - api_key: []

components:
  parameters:
    celeritySignatureV1Param:
      name: Celerity-Signature-V1
      in: header
      description: |
        The Celerity Signature v1 authentication mechanism can be used to authenticate requests to the Deploy Engine.
        See the [Celerity Signature v1](/docs/auth/signature-v1) documentation for more information on how to use this authentication mechanism.
        This is not required if the request is authenticated using an OAuth2/OIDC-issued JWT or an API key.
      required: false
      schema:
        type: string
  schemas:
    BlueprintValidationPayload:
      type: object
      required:
        - directory
      properties:
        fileSourceScheme:
          type: string
          description: |
            The file source scheme to determine where the blueprint document is located.

            This can be one of the following:
              - `file`: The blueprint document is located on the local file system of the Deploy Engine server.
              - `s3`: The blueprint document is located in an S3 bucket.
              - `gcs`: The blueprint document is located in a GCS bucket.
              - `azureblob`: The blueprint document is located in an Azure Blob Storage container.
              - `https`: The blueprint document is located via a public HTTPS URL.

            For remote source authentication, the Deploy Engine server will need to be configured
            with the appropriate credentials to access the remote source.
            Authentication is not supported for `https` sources.
          example: file
          default: file
          enum:
            - file
            - s3
            - gcs
            - azureblob
            - https
        directory:
          type: string
          description: |
            The directory where the blueprint document is located.
            For `file` sources, this must be an absolute path to the directory on the local file system of the Deploy Engine server.
            An example for a `file` source would be `/path/to/blueprint-directory`.
            For `s3`, `gcs` and `azureblob` sources, this must be the path to the virtual directory where the first path segment
            is the bucket/container name and the rest of the path is the path to the virtual directory.
            An example for a remote object storage source would be `bucket-name/path/to/blueprint-directory`.
            For `https` sources, this must be the path to the blueprint document,
            a host must be supplied in the `blueprintLocationMetadata` field.
            An example for a `https` source would be `/path/to/blueprint-directory` with a
            `blueprintLocationMetadata.host` field set to `example.com`.
          example: /path/to/blueprint-directory
        blueprintFile:
          type: string
          description: The name of the blueprint file to validate.
          example: project.blueprint.yml
          default: project.blueprint.yml
        blueprintLocationMetadata:
          $ref: '#/components/schemas/BlueprintLocationMetadata'
        config:
          $ref: '#/components/schemas/Config'

    BlueprintValidation:
      type: object
      required:
        - id
        - status
        - blueprintLocation
        - created
      properties:
        id:
          type: string
          description: The ID of the blueprint validation.
          example: 60d7c6c5-3984-42b9-a3c1-ae8a47a9bf55
        status:
          type: string
          description: The status of the blueprint validation.
          example: VALIDATING
          enum:
            - STARTING
            - VALIDATING
            - VALIDATED
            - FAILED
        blueprintLocation:
          type: string
          description: |
            The location of the blueprint document that is being validated.
            This can be a file path, cloud object storage URL or a public HTTPS URL.
          example: file:///path/to/blueprint-directory/project.blueprint.yml
        created:
          type: integer
          description: The unix timestamp of when the blueprint validation was created in seconds.
          example: 1678901234

    BlueprintValidationEvent:
      type: object
      required:
        - message
        - level
        - timestamp
        - end
      properties:
        message:
          type: string
          description: The message of the diagnostic event.
          example: Incorrect blueprint version
        level:
          type: integer
          description: The level of the diagnostic.
          example: 1
        timestamp:
          type: integer
          description: The unix timestamp of the event in seconds.
          example: 1678901234
        range:
          $ref: "#/components/schemas/DiagnosticRange"
        end:
          type: boolean
          description: |
            Indicates whether or not the diagnostic event is the last event in the stream.
            This will be true if the event is the last event in the stream.
            This will be false if the event is not the last event in the stream.
          example: false

    ChangeStagingEvent:
      oneOf:
        - $ref: '#/components/schemas/ResourceChangesEvent'
        - $ref: '#/components/schemas/ChildChangesEvent'
        - $ref: '#/components/schemas/LinkChangesEvent'
        - $ref: '#/components/schemas/ChangeStagingCompleteEvent'
        - $ref: '#/components/schemas/ErrorEvent'
    
    ResourceChangesEvent:
      type: object
      required:
        - resourceName
        - removed
        - new
        - changes
        - resolveOnDeploy
        - conditionKnownOnDeploy
        - timestamp
      properties:
        resourceName:
          type: string
          description: The name of the resource that will change when deploying the change set.
          example: my-resource
        removed:
          type: boolean
          description: |
            If true, the resource will be removed when deploying the change set.
            This will only be used if the resource is not new.
          example: false
        new:
          type: boolean
          description: |
            Indicates whether or not the resource will be created for the first time
            when deploying the change set.
          example: false
        changes:
          description: The changes that will be made to the resource when deploying the change set.
          allOf:
            - $ref: '#/components/schemas/ResourceChanges'
        resolveOnDeploy:
          type: array
          description: |
            Paths to properties in the resource that contain
            substitutions that can not be resolved until the blueprint
            is deployed.
          items:
            type: string
            description: The path to the property that contains substitutions that can not be resolved until the blueprint is deployed.
            example: spec.field2
        conditionKnownOnDeploy:
          type: boolean
          description: |
            This is used to indicate that the condition for the resource
            can not be resolved until the blueprint is deployed.
            This means the changes described in this event may not be applied
            if the condition evaluates to false when the blueprint is deployed.
          example: false
        timestamp:
          type: integer
          description: The unix timestamp of the event in seconds.
          example: 1678901234

    ChildChangesEvent:
      type: object
      required:
        - childBlueprintName
        - removed
        - new
        - changes
        - timestamp
      properties:
        childBlueprintName:
          type: string
          description: The name of the child blueprint that will change when deploying the change set.
          example: my-child-blueprint
        removed:
          type: boolean
          description: |
            If true, the child blueprint will be removed when deploying the change set.
          example: false
        new:
          type: boolean
          description: |
            Indicates whether or not the child blueprint will be created for the first time
            when deploying the change set.
          example: false
        changes:
          description: The changes that will be made to the child blueprint when deploying the change set.
          allOf:
            - $ref: '#/components/schemas/ChangeSetChanges'
        timestamp:
          type: integer
          description: The unix timestamp of the event in seconds.
          example: 1678901234

    LinkChangesEvent:
      type: object
      required:
        - resourceAName
        - resourceBName
        - removed
        - new
        - changes
        - timestamp
      properties:
        resourceAName:
          type: string
          description: The name of resource A in the link that will change when deploying the change set.
          example: my-resource-a
        resourceBName:
          type: string
          description: The name of resource B in the link that will change when deploying the change set.
          example: my-resource-b
        removed:
          type: boolean
          description: |
            If true, the link will be removed when deploying the change set.
          example: false
        new:
          type: boolean
          description: |
            Indicates whether or not the link will be created for the first time
            when deploying the change set.
          example: false
        changes:
          description: The changes that will be made to the link when deploying the change set.
          allOf:
            - $ref: '#/components/schemas/LinkChanges'
        timestamp:
          type: integer
          description: The unix timestamp of the event in seconds.
          example: 1678901234

    ChangeStagingCompleteEvent:
      type: object
      required:
        - changes
        - timestamp
      properties:
        changes:
          description: The changes that will be made to the blueprint when deploying the change set.
          allOf:
            - $ref: '#/components/schemas/ChangeSetChanges'
        timestamp:
          type: integer
          description: The unix timestamp of the event in seconds.
          example: 1678901234

    ErrorEvent:
      type: object
      required:
        - message
        - timestamp
      properties:
        message:
          type: string
          description: The error message.
          example: Failed to stage changes for resourceA
        diagnostics:
          type: array
          description: |
            A list of diagnostics extracted from an error during change staging or deployment,
            this will be present if there are validation errors when loading the blueprint document.
          items:
            $ref: '#/components/schemas/Diagnostic'
        timestamp:
          type: integer
          description: The unix timestamp of the event in seconds.
          example: 1678901234

    DeploymentEvent:
      oneOf:
        - $ref: '#/components/schemas/ResourceDeploymentEvent'
        - $ref: '#/components/schemas/ChildDeploymentEvent'
        - $ref: '#/components/schemas/LinkDeploymentEvent'
        - $ref: '#/components/schemas/InstanceUpdateDeploymentEvent'
        - $ref: '#/components/schemas/FinishDeploymentEvent'
        - $ref: '#/components/schemas/ErrorEvent'

    ResourceDeploymentEvent:
      type: object
      required:
        - instanceId
        - resourceId
        - resourceName
        - group
        - status
        - preciseStatus
        - attempt
        - canRetry
        - updateTimestamp
      properties:
        instanceId:
          type: string
          description: The ID of the blueprint instance.
          example: 16ef8989-af00-4a4a-8164-72493ceb1aa0
        resourceId:
          type: string
          description: The globally unique ID of the resource.
          example: 16ef8989-af00-4a4a-8164-72493ceb1aa0
        resourceName:
          type: string
          description: THe logical name of the resource as defined in the source blueprint.
          example: my-resource
        group:
          type: integer
          description:
            The group number that the resource belongs to relative to the ordering
            for components in the current blueprint associated with the instance ID.
            A group is a collection of items that can be deployed or destroyed at the same time.
          example: 1
        status:
          type: integer
          description: |
            The high-level status of the resource.
            See the `ResourceState` schema definition for more information on what each status means.
          example: 2
          enum: [0,1,2,3,4,5,6,7,8,9,10,11,12]
        preciseStatus:
          type: integer
          description: |
            The precise status of the resource.
            See the `ResourceState` schema definition for more information on what each status means.
          example: 3
          enum: [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22]
        failureReasons:
          type: array
          description: |
            A list of failure reasons for the resource that will contain values
            for failure events.
          items:
            type: string
            example: Invalid configuration for resource spec
          nullable: true
        attempt:
          type: integer
          description: The attempt number for deploying or destroying the resource.
          example: 1
        canRetry:
          type: boolean
          description: |
            Indicates if the operation for the resource can be retried after this attempt.
          example: false
        updateTimestamp:
          type: integer
          description: The unix timestamp of the event in seconds.
          example: 1678901234
        durations:
          description: |
            Duration information for a resource deployment.
            Duration information is attached on one of the following precise status updates:

            - Config Complete (2)
            - Created (3)
            - Create Failed (4)
            - Create Rollback Failed (6)
            - Create Rollback Complete (7)
            - Destroyed (9)
            - Destroy Failed (10)
            - Destroy Rollback Failed (12)
            - Destroy Rollback Config Complete (13)
            - Destroy Rollback Complete (14)
            - Update Config Complete (16)
            - Updated (17)
            - Update Failed (18)
            - Update Rollback Failed (20)
            - Update Rollback Config Complete (21)
            - Update Rollback Complete (22)
          allOf:
            - $ref: '#/components/schemas/ResourceCompletionDurations'
          nullable: true

    ChildDeploymentEvent:
      type: object
      required:
        - parentInstanceId
        - childInstanceId
        - childName
        - group
        - status
        - updateTimestamp
      properties:
        parentInstanceId:
          type: string
          description: The ID of the parent blueprint instance.
          example: 16ef8989-af00-4a4a-8164-72493ceb1aa0
        childInstanceId:
          type: string
          description: The ID of the child blueprint instance.
          example: 16ef8989-af00-4a4a-8164-72493ceb1aa0
        childName:
          type: string
          description: The logical name of the child blueprint instance as defined in the parent blueprint source.
          example: my-child-blueprint
        group:
          type: integer
          description:
            The group number that the child blueprint instance belongs to relative to the ordering
            for components in the current blueprint associated with the instance ID.
            A group is a collection of items that can be deployed or destroyed at the same time.
          example: 1
        status:
          type: integer
          description: |
            The high-level status of the child blueprint instance.
            See the `BlueprintInstance` schema definition for more information on what each status means.
          example: 2
          enum: [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19]
        failureReasons:
          type: array
          description: |
            A list of failure reasons for the child blueprint instance that will contain values
            for failure events.
          items:
            type: string
            example: Invalid configuration for child blueprint resource spec
          nullable: true
        updateTimestamp:
          type: integer
          description: The unix timestamp of the event in seconds.
          example: 1678901234
        durations:
          description: |
            Duration information for a child blueprint instance deployment.
            Duration information is attached on one of the following instance status updates:

            - Deployed (2)
            - Deploy Failed (3)
            - Destroyed (7)
            - Updated (14)
            - Update Failed (15)
          allOf:
            - $ref: '#/components/schemas/BlueprintInstanceCompletionDurations'
          nullable: true

    LinkDeploymentEvent:
      type: object
      required:
        - instanceId
        - linkId
        - linkName
        - status
        - preciseStatus
        - currentStageAttempt
        - canRetryCurrentStage
        - updateTimestamp
      properties:
        instanceId:
          type: string
          description: The ID of the blueprint instance that the link belongs to.
          example: 16ef8989-af00-4a4a-8164-72493ceb1aa0
        linkId:
          type: string
          description: The globally unique ID of the link.
          example: 16ef8989-af00-4a4a-8164-72493ceb1aa0
        linkName:
          type: string
          description: |
            The logical name of the link in the blueprint.
            This is a combination of the 2 resources that are linked.
            For example, if a link is between a VPC and a subnet, the link name
            would be "vpc::subnet".
          example: vpc::subnet
        status:
          type: integer
          description: |
            The high-level status of the link.
            See the `LinkState` schema definition for more information on what each status means.
          example: 2
          enum: [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18]
        preciseStatus:
          type: integer
          description: |
            The precise status of the link.
            See the `LinkState` schema definition for more information on what each status means.
          example: 3
          enum: [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18]
        failureReasons:
          type: array
          description: |
            A list of failure reasons for the link that will contain values
            for failure events.
          items:
            type: string
            example: Invalid annotation value for link
          nullable: true
        currentStageAttempt:
          type: integer
          description: The current attempt number for applying the changes for the current stage of the link deployment/removal.
          example: 1
        canRetryCurrentStage:
          type: boolean
          description: |
            Indicates if the operation for the link can be retried after this attempt
            of the current stage.
          example: false
        updateTimestamp:
          type: integer
          description: The unix timestamp of the event in seconds.
          example: 1678901234
        durations:
          description: |
            Duration information for a link deployment.
            Duration information is attached on one of the following precise status updates:

            - Resource A Updated (2)
            - Resource A Update Failed (3)
            - Resource A Update Rollback Failed (5)
            - Resource A Update Rollback Complete (6)
            - Resource B Updated (8)
            - Resource B Update Failed (9)
            - Resource B Update Rollback Failed (11)
            - Resource B Update Rollback Complete (12)
            - Intermediary Resources Updated (14)
            - Intermediary Resources Update Failed (15)
            - Intermediary Resources Update Rollback Failed (17)
            - Intermediary Resources Update Rollback Complete (18)
          allOf:
            - $ref: '#/components/schemas/LinkCompletionDurations'
          nullable: true

    InstanceUpdateDeploymentEvent:
      type: object
      required:
        - instanceId
        - status
        - updateTimestamp
      properties:
        instanceId:
          type: string
          description: The ID of the blueprint instance.
          example: 16ef8989-af00-4a4a-8164-72493ceb1aa0
        status:
          type: integer
          description: |
            The status of the blueprint instance deployment.
            See the `BlueprintInstance` schema definition for more information on what each status means.
          example: 2
          enum: [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19]
        updateTimestamp:
          type: integer
          description: The unix timestamp of the event in seconds.
          example: 1678901234

    FinishDeploymentEvent:
      type: object
      required:
        - instanceId
        - status
        - finishTimestamp
        - updateTimestamp
        - durations
      properties:
        instanceId:
          type: string
          description: The ID of the blueprint instance.
          example: 16ef8989-af00-4a4a-8164-72493ceb1aa0
        status:
          type: integer
          description: |
            The status of the blueprint instance deployment.
            See the `BlueprintInstance` schema definition for more information on what each status means.
          example: 2
          enum: [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19]
        failureReasons:
          type: array
          description: |
            A list of failure reasons for the blueprint instance that will contain values
            for failure events.
          items:
            type: string
            example: Resource creation failed for resources "my-resource-1" and "my-resource-2"
          nullable: true
        finishTimestamp:
          type: integer
          description: The unix timestamp in seconds for when the deployment process finished.
          example: 1678901234
        updateTimestamp:
          type: integer
          description: The unix timestamp of the event in seconds for when the status update occurred.
          example: 1678901234
        durations:
          description: |
            Duration information for a blueprint instance deployment.
            Duration information is attached on one of the following instance status updates:

            - Deploying (1) - preparation phase duration only
            - Deployed (2)
            - Deploy Failed (3)
            - Deploy Rollback Failed (5)
            - Deploy Rollback Complete (6)
            - Destroyed (8)
            - Destroy Failed (9)
            - Destroy Rollback Failed (11)
            - Destroy Rollback Complete (12)
            - Updated (14)
            - Update Failed (15)
            - Update Rollback Failed (17)
            - Update Rollback Complete (18)
          allOf:
            - $ref: '#/components/schemas/BlueprintInstanceCompletionDurations'
          nullable: true

    Diagnostic:
      type: object
      required:
        - message
        - level
      properties:
        message:
          type: string
          description: The message of the diagnostic.
          example: Incorrect blueprint version
        level:
          type: integer
          description: The level of the diagnostic.
          example: 1
        range:
          $ref: "#/components/schemas/DiagnosticRange"

    DiagnosticRange:
      type: object
      properties:
        start:
          description: The start position of the range.
          $ref: "#/components/schemas/SourceMeta"
        end:
          description: The end position of the range.
          $ref: "#/components/schemas/SourceMeta"
        columnAccuracy:
          type: integer
          description: The column accuracy of the range in the host document.
          example: 1
          enum:
            - 1
            - 2

    SourceMeta:
      type: object
      properties:
        line:
          type: integer
          description: The line number of the source position.
          example: 1
        column:
          type: integer
          description: The column number of the source position.
          example: 1
        endPosition:
          description: |
            An optional end position for the location where the location represents
            a range that identifies a particular item in a document.
          allOf:
            - $ref: "#/components/schemas/SourcePosition"
          nullable: true

    SourcePosition:
      type: object
      properties:
        line:
          type: integer
          description: The line number of the source position.
          example: 1
        column:
          type: integer
          description: The column number of the source position.
          example: 1

    CreateChangeSetPayload:
      type: object
      required:
        - directory
      properties:
        fileSourceScheme:
          type: string
          description: |
            The file source scheme to determine where the blueprint document is located.

            This can be one of the following:
              - `file`: The blueprint document is located on the local file system of the Deploy Engine server.
              - `s3`: The blueprint document is located in an S3 bucket.
              - `gcs`: The blueprint document is located in a GCS bucket.
              - `azureblob`: The blueprint document is located in an Azure Blob Storage container.
              - `https`: The blueprint document is located via a public HTTPS URL.

            For remote source authentication, the Deploy Engine server will need to be configured
            with the appropriate credentials to access the remote source.
            Authentication is not supported for `https` sources.
          example: file
          default: file
          enum:
            - file
            - s3
            - gcs
            - azureblob
            - https
        directory:
          type: string
          description: |
            The directory where the blueprint document is located.
            For `file` sources, this must be an absolute path to the directory on the local file system of the Deploy Engine server.
            An example for a `file` source would be `/path/to/blueprint-directory`.
            For `s3`, `gcs` and `azureblob` sources, this must be the path to the virtual directory where the first path segment
            is the bucket/container name and the rest of the path is the path to the virtual directory.
            An example for a remote object storage source would be `bucket-name/path/to/blueprint-directory`.
            For `https` sources, this must be the path to the blueprint document,
            a host must be supplied in the `blueprintLocationMetadata` field.
            An example for a `https` source would be `/path/to/blueprint-directory` with a
            `blueprintLocationMetadata.host` field set to `example.com`.
          example: /path/to/blueprint-directory
        blueprintFile:
          type: string
          description: The name of the blueprint file to use to stage changes.
          example: project.blueprint.yml
          default: project.blueprint.yml
        blueprintLocationMetadata:
          $ref: '#/components/schemas/BlueprintLocationMetadata'
        instanceId:
          type: string
          description: |
            The ID of an existing blueprint instance to stage changes for.
            If this is not provided and an instance name is not provided,
            a change set for a new blueprint instance deployment will be created.

            This should be left empty if the `instanceName` field is provided.
            When both `instanceId` and `instanceName` are provided, the `instanceId` field will be used.
          example: a471bbb8-1267-4e65-873b-fa86bca71fcf
        instanceName:
          type: string
          description: |
            The user-defined name of an existing blueprint instance to stage changes for.
            If this is not provided and an instance ID is not provided,
            a change set for a new blueprint instance deployment will be created.

            This should be left empty if the `instanceId` field is provided.
            When both `instanceId` and `instanceName` are provided, the `instanceId` field will be used.
          example: my-instance
        destroy:
          type: boolean
          description: |
            If true, the change set will be created for a destroy operation.
            This will only be used if the `instanceId` or `instanceName` fields are provided.
            If this is not provided, the default value is false.
          example: false
          default: false
        config:
          $ref: '#/components/schemas/Config'

    CreateBlueprintInstancePayload:
      type: object
      required:
        - changeSetId
        - directory
        - rollback
      properties:
        changeSetId:
          type: string
          description: |
            The ID of the change set to use to deploy the blueprint instance.
            When creating a new blueprint instance (deploying), a change set is used instead
            of the deployment process re-computing the changes that need to be applied.

            The source blueprint document is still required in addition to a change set
            to finish of resolving substitutions that can only be resolved at deploy time
            and for deployment orchestration.
            The source blueprint document is not used to compute changes at the deployment stage.

          example: a471bbb8-1267-4e65-873b-fa86bca71fcf
        fileSourceScheme:
          type: string
          description: |
            The file source scheme to determine where the blueprint document is located.

            This can be one of the following:
              - `file`: The blueprint document is located on the local file system of the Deploy Engine server.
              - `s3`: The blueprint document is located in an S3 bucket.
              - `gcs`: The blueprint document is located in a GCS bucket.
              - `azureblob`: The blueprint document is located in an Azure Blob Storage container.
              - `https`: The blueprint document is located via a public HTTPS URL.

            For remote source authentication, the Deploy Engine server will need to be configured
            with the appropriate credentials to access the remote source.
            Authentication is not supported for `https` sources.
          example: file
          default: file
          enum:
            - file
            - s3
            - gcs
            - azureblob
            - https
        directory:
          type: string
          description: |
            The directory where the blueprint document is located.
            For `file` sources, this must be an absolute path to the directory on the local file system of the Deploy Engine server.
            An example for a `file` source would be `/path/to/blueprint-directory`.
            For `s3`, `gcs` and `azureblob` sources, this must be the path to the virtual directory where the first path segment
            is the bucket/container name and the rest of the path is the path to the virtual directory.
            An example for a remote object storage source would be `bucket-name/path/to/blueprint-directory`.
            For `https` sources, this must be the path to the blueprint document,
            a host must be supplied in the `blueprintLocationMetadata` field.
            An example for a `https` source would be `/path/to/blueprint-directory` with a
            `blueprintLocationMetadata.host` field set to `example.com`.
          example: /path/to/blueprint-directory
        blueprintFile:
          type: string
          description: |
            The name of the blueprint file to be used during deployment.
            The source file is needed in addition to a change set ID as it is required
            as a part of the deployment process for resolving substitutions that can only
            be resolved at deploy time and is required for deployment orchestration.
          example: project.blueprint.yml
          default: project.blueprint.yml
        blueprintLocationMetadata:
          $ref: '#/components/schemas/BlueprintLocationMetadata'
        rollback:
          type: boolean
          description: |
            If true, the creation of the blueprint instance will be treated as a rollback operation
            for a previously destroyed blueprint instance.
          example: false
          default: false
        config:
          $ref: '#/components/schemas/Config'

    UpdateBlueprintInstancePayload:
      type: object
      required:
        - changeSetId
        - directory
        - rollback
      properties:
        changeSetId:
          type: string
          description: |
            The ID of the change set to use to deploy the blueprint instance update.
            When updating an existing blueprint instance (deploying), a change set is used instead
            of the deployment process re-computing the changes that need to be applied.

            The source blueprint document is still required in addition to a change set
            to finish of resolving substitutions that can only be resolved at deploy time
            and for deployment orchestration.
            The source blueprint document is not used to compute changes at the deployment stage.

          example: a471bbb8-1267-4e65-873b-fa86bca71fcf
        fileSourceScheme:
          type: string
          description: |
            The file source scheme to determine where the blueprint document is located.

            This can be one of the following:
              - `file`: The blueprint document is located on the local file system of the Deploy Engine server.
              - `s3`: The blueprint document is located in an S3 bucket.
              - `gcs`: The blueprint document is located in a GCS bucket.
              - `azureblob`: The blueprint document is located in an Azure Blob Storage container.
              - `https`: The blueprint document is located via a public HTTPS URL.

            For remote source authentication, the Deploy Engine server will need to be configured
            with the appropriate credentials to access the remote source.
            Authentication is not supported for `https` sources.
          example: file
          default: file
          enum:
            - file
            - s3
            - gcs
            - azureblob
            - https
        directory:
          type: string
          description: |
            The directory where the blueprint document is located.
            For `file` sources, this must be an absolute path to the directory on the local file system of the Deploy Engine server.
            An example for a `file` source would be `/path/to/blueprint-directory`.
            For `s3`, `gcs` and `azureblob` sources, this must be the path to the virtual directory where the first path segment
            is the bucket/container name and the rest of the path is the path to the virtual directory.
            An example for a remote object storage source would be `bucket-name/path/to/blueprint-directory`.
            For `https` sources, this must be the path to the blueprint document,
            a host must be supplied in the `blueprintLocationMetadata` field.
            An example for a `https` source would be `/path/to/blueprint-directory` with a
            `blueprintLocationMetadata.host` field set to `example.com`.
          example: /path/to/blueprint-directory
        blueprintFile:
          type: string
          description: |
            The name of the blueprint file to be used during deployment.
            The source file is needed in addition to a change set ID as it is required
            as a part of the update deployment process for resolving substitutions that can only
            be resolved at deploy time and is required for deployment orchestration.
          example: project.blueprint.yml
          default: project.blueprint.yml
        blueprintLocationMetadata:
          $ref: '#/components/schemas/BlueprintLocationMetadata'
        rollback:
          type: boolean
          description: |
            If true, the blueprint instance update will be treated as a rollback operation
            for the previous update to the blueprint instance.
          example: false
          default: false
        config:
          $ref: '#/components/schemas/Config'

    DestroyBlueprintInstancePayload:
      type: object
      required:
        - changeSetId
        - rollback
      properties:
        changeSetId:
          type: string
          description: |
            The ID of the change set to use to destroy the blueprint instance.
            When destroy a blueprint instance, a change set is used instead
            of the destroy process re-computing the changes that need to be applied.

          example: a471bbb8-1267-4e65-873b-fa86bca71fcf
        rollback:
          type: boolean
          description: |
            If true, destroying the blueprint instance will be treated as a rollback
            for the initial deployment of the blueprint instance.
            This will usually be set to true when rolling back a recent first time deployment
            that needs to be rolled back due to a failure in a parent blueprint instance.
          example: false
          default: false
        config:
          $ref: '#/components/schemas/Config'

    ChangeSet:
      type: object
      required:
        - id
        - destroy
        - status
        - blueprintLocation
        - created
      properties:
        id:
          type: string
          description: The ID of the change set.
          example: 60d7c6c5-3984-42b9-a3c1-ae8a47a9bf55
        instanceId:
          type: string
          description: |
            The ID of the blueprint instance that the change set is for.
            This is only present for change sets that are created for existing blueprint instances.
          example: 60d7c6c5-3984-42b9-a3c1-ae8a47a9bf55
          nullable: true
        destroy:
          type: boolean
          description: |
            Determines whether the change set is intended for a destroy operation.
          example: false
        status:
          type: string
          description: The status of the change set.
          example: STAGING_CHANGES
          enum:
            - STARTING
            - STAGING_CHANGES
            - CHANGES_STAGED
            - FAILED
        blueprintLocation:
          type: string
          description: |
            The location of the blueprint document being applied to create the change set.
            This can be a file path, cloud object storage URL or a public HTTPS URL.
          example: file:///path/to/blueprint-directory/project.blueprint.yml
        changes:
          description: |
            The changes that will be applied to the blueprint instance.
            This will be empty until the change staging process has completed.
          $ref: '#/components/schemas/ChangeSetChanges'
        created:
          type: integer
          description: The unix timestamp of when the change set was created in seconds.
          example: 1678901234

    ChangeSetChanges:
      type: object
      required:
        - newResources
        - resourceChanges
        - removedResources
        - removedLinks
        - newChildren
        - childChanges
        - recreateChildren
        - removedChildren
        - newExports
        - exportChanges
        - unchangedExports
        - removedExports
        - metadataChanges
        - resolveOnDeploy
      properties:
        newResources:
          type: object
          description: The resources that will be created when deploying the changes.
          additionalProperties:
            $ref: '#/components/schemas/ResourceChanges'
        resourceChanges:
          type: object
          description: The changes that will be made to existing resources when deploying the changes.
          additionalProperties:
            $ref: '#/components/schemas/ResourceChanges'
        removedResources:
          type: array
          description: The names of resources that will be removed when deploying the changes.
          items:
            type: string
            description: The name of the resource that will be removed.
            example: my-old-resource
        removedLinks:
          type: array
          description: |
            The name of links that will be removed when deploying the changes.
            These names will be in the format "resourceAName::resourceBName".
          items:
            type: string
            description: The name of the link that will be removed.
            example: my-old-link
        newChildren:
          type: object
          description: The child blueprints that will be created when deploying the changes.
          additionalProperties:
            $ref: '#/components/schemas/NewBlueprintDefinition'
        childChanges:
          type: object
          description: The changes that will be made to existing child blueprints when deploying the changes.
          additionalProperties:
            $ref: '#/components/schemas/ChangeSetChanges'
        recreateChildren:
          type: array
          description: The names of child blueprints that will be recreated when deploying the changes.
          items:
            type: string
            description: The name of the child blueprint that will be recreated.
            example: another-child-blueprint
        removedChildren:
          type: array
          description: The names of child blueprints that will be removed when deploying the changes.
          items:
            type: string
            description: The name of the child blueprint that will be removed.
            example: old-child-blueprint
        newExports:
          type: object
          description: The exports that will be created when deploying the changes.
          additionalProperties:
            $ref: '#/components/schemas/FieldChange'
        exportChanges:
          type: object
          description: The changes that will be made to existing exports when deploying the changes.
          additionalProperties:
            $ref: '#/components/schemas/FieldChange'
        unchangedExports:
          type: array
          description: The exports that will not be changed when deploying the changes.
          items:
            type: string
            description: The name of the export that will not be changed.
            example: my-export
        removedExports:
          type: array
          description: The exports that will be removed when deploying the changes.
          items:
            type: string
            description: The name of the export that will be removed.
            example: my-old-export
        metadataChanges:
          type: object
          description: Changes to the blueprint-wide metadata.
          allOf:
            - $ref: '#/components/schemas/BlueprintMetadataChanges'
        resolveOnDeploy:
          type: array
          description: |
            Paths to properties in blueprint elements that contain
            substitutions that can not be resolved until the blueprint
            is deployed.
            This includes properties in resources, data sources, blueprint-wide
            metadata and exported fields.
          items:
            type: string
            description: The path to the property that contains substitutions that can not be resolved until the blueprint is deployed.
            example: resources["my-resource"].spec.field2
      example:
        $ref: '#/components/examples/changeSetChangesExample'

    BlueprintMetadataChanges:
      type: object
      required:
        - newFields
        - modifiedFields
        - unchangedFields
        - removedFields
      properties:
        newFields:
          type: array
          description: The fields that will be added to the blueprint metadata.
          items:
            $ref: '#/components/schemas/FieldChange'
        modifiedFields:
          type: array
          description: The fields that will be modified in the blueprint metadata.
          items:
            $ref: '#/components/schemas/FieldChange'
        unchangedFields:
          type: array
          description: The fields that will not be changed in the blueprint metadata.
          items:
            type: string
            description: The name of the field that will not be changed.
            example: my-field
        removedFields:
          type: array
          description: The fields that will be removed from the blueprint metadata.
          items:
            type: string
            description: The name of the field that will be removed.
            example: my-old-field

    FieldChange:
      type: object
      required:
        - fieldPath
        - prevValue
        - newValue
        - mustRecreate
      properties:
        fieldPath:
          type: string
          description: The path to the field that has changed.
          example: my-field
        prevValue:
          $ref: '#/components/schemas/AnyValue'
          description: The previous value of the field.
          example: old-value
        newValue:
          $ref: '#/components/schemas/AnyValue'
          description: The new value of the field.
          example: new-value
        mustRecreate:
          type: boolean
          description: |
            If true, the resource must be recreated to apply the change.
          example: false

    ResourceChanges:
      type: object
      required:
        - appliedResourceInfo
        - mustRecreate
        - modifiedFields
        - newFields
        - removedFields
        - unchangedFields
        - computedFields
        - fieldChangesKnownOnDeploy
        - conditionKnownOnDeploy
        - newOutboundLinks
        - outboundLinkChanges
        - removedOutboundLinks
      properties:
        appliedResourceInfo:
          description: |
            Provides a new version of the spec and schema for which
            ${..} substitutions have been applied so the deploy
            phase has everything it needs to deploy the resource.
          allOf:
            - $ref: '#/components/schemas/ResourceInfo'
        mustRecreate:
          type: boolean
          description: |
            If true, the resource must be recreated to apply the change.
          example: false
        modifiedFields:
          type: array
          description: The fields that will be modified in the resource spec.
          items:
            $ref: '#/components/schemas/FieldChange'
        newFields:
          type: array
          description: The fields that will be added to the resource spec.
          items:
            $ref: '#/components/schemas/FieldChange'
        removedFields:
          type: array
          description: The fields that will be removed from the resource spec.
          items:
            type: string
            description: The name of the field that will be removed.
            example: my-old-field
        unchangedFields:
          type: array
          description: The fields that will not be changed in the resource spec.
          items:
            type: string
            description: The name of the field that will not be changed.
            example: my-field
        computedFields:
          type: array
          description: |
            A list of field paths that are computed at deploy time.
            This is primarily useful to give fast access to
            information about which fields are computed without having to
            inspect the spec schema.
          items:
            type: string
            description: The name of the field that will be computed.
            example: my-computed-field
        fieldChangesKnownOnDeploy:
          type: array
          description: |
            A list of field names for which changes will be known when the
            host blueprint is deployed.
          items:
            type: string
            description: The name of the field that will be known when the host blueprint is deployed.
            example: my-field
        conditionKnownOnDeploy:
          type: boolean
          description: |
            Specifies whether the condition
            for the resource will known when the host blueprint is deployed.
            When a cnodition makes use of items in the blueprint that are not
            resolved until deployment, whether the resource will be deployed or not
            cannot be known during the change staging phase.
          example: true
        newOutboundLinks:
          type: object
          description: |
            A mapping of the linked to resource name to the link changes
            representing the new links that will be created.
          additionalProperties:
            $ref: '#/components/schemas/LinkChanges'
        outboundLinkChanges:
          type: object
          description: |
            A mapping of the linked to resource name to any changes
            that will be made to existing links.
          additionalProperties:
            $ref: '#/components/schemas/LinkChanges'
        removedOutboundLinks:
          type: array
          description: |
            A list of link identifiers that will be removed.
            The form of the link identifier is `{resourceA}::{resourceB}`.
          items:
            type: string
            description: The name of the link that will be removed.
            example: my-resource-a::my-resource-b

    LinkChanges:
      type: object
      required:
        - modifiedFields
        - newFields
        - removedFields
        - unchangedFields
        - fieldChangesKnownOnDeploy
      properties:
        modifiedFields:
          type: array
          description: The fields that will be modified in the link between two resources.
          items:
            $ref: '#/components/schemas/FieldChange'
        newFields:
          type: array
          description: The fields that will be added to the link between two resources.
          items:
            $ref: '#/components/schemas/FieldChange'
        removedFields:
          type: array
          description: The fields that will be removed from the link between two resources.
          items:
            type: string
            description: The name of the field that will be removed.
            example: my-old-field
        unchangedFields:
          type: array
          description: The fields that will not be changed in the link between two resources.
          items:
            type: string
            description: The name of the field that will not be changed.
            example: my-field
        fieldChangesKnownOnDeploy:
          type: array
          description: |
            A list of field names for which changes will be known when the
            host blueprint is deployed.
          items:
            type: string
            description: The name of the field that will be known when the host blueprint is deployed.
            example: my-field

    ResourceInfo:
      type: object
      required:
        - resourceId
        - resourceName
        - instanceId
        - currentResourceState
        - resourceWithResolvedSubs
      properties:
        resourceId:
          type: string
          description: |
            The ID of a resource when in the context of a blueprint instance
            when deploying or staging changes.
            In some cases, this may be empty, especially for staging changes
            for new blueprint instances or when the resource has not yet been created.
          example: 60d7c6c5-3984-42b9-a3c1-ae8a47a9bf55
        resourceName:
          type: string
          description: |
            The name of the resource in the blueprint spec.
            This field in the `ResourceInfo` object is is useful for
            new resources that do not have any current resource state.
          example: my-new-resource
        instanceId:
          type: string
          description: |
            The ID of the blueprint instance that the current resource belongs to.
            This could be empty if the resource is being staged for an initial deployment
            or is a new resource that does not yet exist.
          example: a97cf86f-2a5e-4614-984e-da480a0daa7a
        currentResourceState:
          type: object
          description: |
            The current state of the resource for which changes are being staged.
            This is included in `ResourceInfo` to avoid resource plugins and other consumers
            of resource change definitions needing to interact directly with the underlying
            state persistence to get the current state of the resource.
          nullable: true
          allOf:
            - $ref: '#/components/schemas/ResourceState'
        resourceWithResolvedSubs:
          type: object
          description: |
            A version of the resource defined in the blueprint document for which all
            ${..} substitutions have been resolved.
          allOf:
            - $ref: '#/components/schemas/ResolvedResource'

    ResourceState:
      type: object
      required:
        - id
        - name
        - type
        - instanceId
        - status
        - preciseStatus
        - lastDeployedTimestamp
        - lastDeployAttemptTimestamp
        - specData
        - failureReasons
      properties:
        id:
          type: string
          description: A globally unique identifier for the resource.
          example: 60d7c6c5-3984-42b9-a3c1-ae8a47a9bf55
        name:
          type: string
          description: The logical name of the resource in the blueprint.
          example: my-existing-resource
        type:
          type: string
          description: The type of the resource.
          example: aws/lambda/function
        templateName:
          type: string
          description: |
            The name of the resource template in the source blueprint
            that the resource is derived from.
            This will be empty, null or not set if the resource is not derived from a template.
          example: my-template
          nullable: true
        instanceId:
          type: string
          description: The ID of the blueprint instance that the resource belongs to.
          example: a97cf86f-2a5e-4614-984e-da480a0daa7a
        status:
          type: integer
          description: |
            The high level status of the resource.

            The following high level status codes are supported:

            - Unknown (0) - The status used when we can't determine an accurate status for a resource.
            - Creating (1) - The status used when an initial resource deployment is currently in progress.
            - Created (2) - The status used when a resource has been deployed successfully for the first time.
            - Create Failed (3) - The status used when the first creation of a resource has failed.
            - Destroying (4) - The status used when a resource is in the process of being destroyed.
            - Destroyed (5) - The status used when a resource has been destroyed.
            - Destroy Failed (6) - The status used when the destruction of a resource fails.
            - Updating (7) - The status used when a resource is being updated.
            - Updated (8) - The status used when a resource has been updated successfully.
            - Update Failed (9) - The status used when the update of a resource fails.
            - Rolling Back (10) - The status used when another change in the same blueprint has failed and the latest change involving the current resource is being rolled back.
            - Rollback Failed (11) - The status used when another change in the same blueprint has failed and the latest change involving the current resource could not be rolled back.
            - Rollback Complete (12) - The status used when another change in the same blueprint has failed and the latest change involving the current resource has been rolled back.
          example: 2
          enum: [0,1,2,3,4,5,6,7,8,9,10,11,12]
        preciseStatus:
          type: integer
          description: |
            The precise status of the resource.

            The following precise status codes are supported:

            - Unknown (0) - The precise status used when we can't determine an accurate status for a resource.
            - Creating (1) - The precise status used when an initial resource deployment is currently in progress.
            - Config Compelte (2) - The precise status used when a resource has been configured successfully.
            - Created (3) - The precise status used when a resource has been deployed successfully and is considered stable.
            - Create Failed (4) - The precise status used when the first creation of a resource has failed.
            - Create Rolling Back (5) - The precise status used when another change in the same blueprint has failed and the current resource that was successfully created is being rolled back.
            - Create Rollback Failed (6) - The precise status used when another change in the same blueprint has failed and the current resource that was successfully created could not be rolled back.
            - Create Rollback Complete (7) - The precise status used when another change in the same blueprint has failed and the current resource that was successfully created has been rolled back.
            - Destroying (8) - The precise status used when a resource is in the process of being destroyed.
            - Destroyed (9) - The precise status used when a resource has been destroyed.
            - Destroy Failed (10) - The precise status used when the destruction of a resource fails.
            - Destroy Rolling Back (11) - The precise status used when another change in the same blueprint has failed and the current resource that was successfully destroyed is being rolled back.
            - Destroy Rollback Failed (12) - The precise status used when another change in the same blueprint has failed and the current resource that was successfully destroyed could not be rolled back.
            - Destroy Rollback Config Complete (13) - The precise status used when another change in the same blueprint has failed and the current resource that was succesfully removed has been rolled back (recreated) but is not yet in a stable state.
            - Destroy Rollback Complete (14) - The precise status used when another change in the same blueprint has failed and the current resource that was successfully removed has been rolled back (recreated) and is in a stable state.
            - Updating (15) - The precise status used when a resource is being updated.
            - Update Config Complete (16) - The precise status used when a resource being updated has been configured successfully.
            - Updated (17) - The precise status used when a resource has been updated successfully and is considered stable.
            - Update Failed (18) - The precise status used when the update of a resource fails.
            - Update Rolling Back (19) - The precise status used when another change in the same blueprint has failed and the current resource that was successfully updated is being rolled back.
            - Update Rollback Failed (20) - The precise status used when another change in the same blueprint has failed and the current resource that was successfully updated could not be rolled back.
            - Update Rollback Config Complete (21) - The precise status used when another change in the same blueprint has failed and the current resource that was successfully updated has been rolled back but is not yet in a stable state.
            - Update Rollback Complete (22) - The precise status used when another change in the same blueprint has failed and the current resource that was successfully updated has been rolled back and is in a stable state.
          example: 3
          enum: [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22]
        lastStatusUpdateTimestamp:
          type: integer
          description: The unix timestamp when the resource deployment status was last updated.
          nullable: true
          example: 1678901234
        lastDeployedTimestamp:
          type: integer
          description: The unix timestamp when the resource was last deployed.
          example: 1678901234
        lastDeployAttemptTimestamp:
          type: integer
          description: The unix timestamp for when the last attempt was made to deploy the resource.
          example: 1678901234
        specData:
          type: object
          description: |
            The resolved resource spec for the currently deployed version of the resource
            along with computed fields derived from the deployed resource in the upstream
            provider.
          additionalProperties: true
          example:
            functionName: my-lambda-function
            handler: index.handler
            runtime: nodejs20.x
            arn: arn:aws:lambda:us-east-1:123456789012:function:my-lambda-function
        description:
          type: string
          description: A description of the resource.
          example: A lambda function for processing events
          nullable: true
        metadata:
          type: object
          description: |
            The metadata for the resource that is derived from a source blueprint
            that includes additional information that allows for extensions built on top
            of the blueprint framework along with the storage of labels, annotations and
            a human-friendly display name for the resource.
          allOf:
            - $ref: '#/components/schemas/ResourceMetadataState'
        dependsOnResources:
          type: array
          description: The names of resources that this resource depends on in the blueprint.
          items:
            type: string
            description: The name of the resource that this resource depends on.
            example: my-other-resource
        dependsOnChildren:
          type: array
          description: The names of child blueprints that this resource depends on in the blueprint.
          items:
            type: string
            description: The name of the child blueprint that this resource depends on.
            example: my-other-child-blueprint
        failureReasons:
          type: array
          description: The reasons why the resource deployment has failed, if applicable.
          items:
            type: string
            description: The reason why the resource deployment has failed.
            example: The resource could not be created because the IAM role does not exist.
        drifted:
          type: boolean
          description: |
            If true, the resource has drifted from the current state stored in the Deploy Engine.
            This is used to indicate that the resource has been modified in the upstream provider
            outside of the Deploy Engine.
          example: false
          nullable: true
        lastDriftDetectedTimestamp:
          type: integer
          description: The unix timestamp when the resource was last detected to be drifted.
          example: 1678901234
          nullable: true
        durations:
          type: object
          description: Duration information for the latest deployment of the resource.
          allOf:
            - $ref: '#/components/schemas/ResourceCompletionDurations'
          nullable: true

    ResourceMetadataState:
      type: object
      properties:
        displayName:
          type: string
          description: A human-friendly display name for the resource.
          example: My Lambda Function
          nullable: true
        annotations:
          type: object
          description: Annotations for the resource.
          additionalProperties:
            $ref: '#/components/schemas/AnyValue'
        labels:
          type: object
          description: Labels for the resource.
          additionalProperties:
            type: string
            description: The label value.
            example: processing
        custom:
          type: object
          description: Custom metadata for the resource.
          allOf:
            - $ref: '#/components/schemas/AnyValue'

    ResourceCompletionDurations:
      type: object
      properties:
        configCompleteDuration:
          type: number
          description: |
            The duration in milliseconds for the resource to be configured.
            This will only be set if the resource has reached the config complete status.
          example: 10000.0
          nullable: true
        totalDuration:
          type: number
          description: The duration in milliseconds for the resource change to reach the final status.
          example: 20000.0
          nullable: true
        attemptDurations:
          type: array
          description: The durations in milliseconds for each attempt to deploy the resource.
          items:
            type: number
            description: The duration in milliseconds for the attempt to deploy the resource.
            example: 20000.0

    ResolvedResource:
      type: object
      required:
        - type
        - spec
      properties:
        type:
          type: string
          description: The type of the resource.
          example: aws/lambda/function
        description:
          type: string
          description: A description of the resource.
          example: A lambda function for processing events
          nullable: true
        metadata:
          type: object
          description: |
            The metadata for a resource in which all ${..} substitutions have been resolved.
          allOf:
            - $ref: '#/components/schemas/ResourceMetadataState'
          nullable: true
        condition:
          description: |
            A condition for the resource that is derived from a source blueprint
            that determines whether or not the resource should be deployed.
          allOf:
            - $ref: '#/components/schemas/ResolvedResourceCondition'
        linkSelector:
          description: |
            A link selector for the resource that is derived from a source blueprint
            that determines which resources the current resource should be linked to.
          allOf:
            - $ref: '#/components/schemas/LinkSelector'
        spec:
          type: object
          description: The specification for the resource that is derived from the source blueprint.
          additionalProperties:
            $ref: '#/components/schemas/AnyValue'
          example:
            functionName: my-lambda-function
            handler: index.handler
            runtime: nodejs20.x
  
    LinkSelector:
      type: object
      required:
        - byLabel
      properties:
        byLabel:
          type: object
          description: |
            A link selector that selects resources by label.
            This is used to determine which resources the current resource should be linked to.
          additionalProperties:
            type: string
            description: The label value.
            example: processing

    ResolvedResourceCondition:
      oneOf:
        - type: boolean
          description: |
            A resolved boolean value for a condition usually sourced from evaluating a ${..} substitution.
        - type: object
          description: |
            A condition object containing a composition of other conditions.
          properties:
            and:
              type: array
              description: A list of conditions that must all be true.
              items:
                $ref: '#/components/schemas/ResolvedResourceCondition'
              nullable: true
            or:
              type: array
              description: A list of conditions that must be at least one true.
              items:
                $ref: '#/components/schemas/ResolvedResourceCondition'
              nullable: true
            not:
              description: The negation of a condition.
              allOf:
                - $ref: '#/components/schemas/ResolvedResourceCondition'

    NewBlueprintDefinition:
      type: object
      required:
        - newResources
        - newChildren
        - newExports
      properties:
        newResources:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/ResourceChanges'
        newChildren:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/NewBlueprintDefinition'
        newExports:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/FieldChange'

    BlueprintInstance:
      type: object
      required:
        - id
        - name
        - status
        - lastDeployedTimestamp
        - lastDeployAttemptTimestamp
        - resourceIds
        - resources
        - links
        - metadata
        - exports
        - childBlueprints
      properties:
        id:
          type: string
          description: The ID of the blueprint instance.
          example: a97cf86f-2a5e-4614-984e-da480a0daa7a
        name:
          type: string
          description: A user-defined unique name for the blueprint instance.
          example: my-blueprint-instance
        status:
          type: integer
          description: |
            The status of the blueprint instance.

            The following status codes are supported:
            
            - Preparing (0) - The status used when a blueprint instance is being prepared to be deployed, updated or destroyed.
            - Deploying (1) - The status used when a blueprint instance is being deployed.
            - Deployed (2) - The status used when a blueprint instance has been deployed successfully.
            - Deploy Failed (3) - The status used when the deployment of a blueprint instance has failed.
            - Deploy Rolling Back (4) - The status used when a blueprint instance deployment has failed and is being rolled back to a previous state.
            - Deploy Rollback Failed (5) - The status used when a blueprint instance deployment has failed and the rollback to a previous state has failed.
            - Deploy Rollback Complete (6) - The status used when a blueprint instance deployment has failed and the rollback to a previous state has completed successfully.
            - Destroying (7) - The status used when a blueprint instance is being destroyed.
            - Destroyed (8) - The status used when a blueprint instance has been destroyed.
            - Destroy Failed (9) - The status used when the destruction of a blueprint instance has failed.
            - Destroy Rolling Back (10) - The status used when a blueprint instance destruction has failed and is being rolled back to a previous state.
            - Destroy Rollback Failed (11) - The status used when a blueprint instance destruction has failed and the rollback to a previous state has failed.
            - Destroy Rollback Complete (12) - The status used when a blueprint instance destruction has failed and the rollback to a previous state has completed successfully.
            - Updating (13) - The status used when a blueprint instance is being updated.
            - Updated (14) - The status used when a blueprint instance has been updated successfully.
            - Update Failed (15) - The status used when the update of a blueprint instance has failed.
            - Update Rolling Back (16) - The status used when a blueprint instance update has failed and is being rolled back to a previous state.
            - Update Rollback Failed (17) - The status used when a blueprint instance update has failed and the rollback to a previous state has failed.
            - Update Rollback Complete (18) - The status used when a blueprint instance update has failed and the rollback to a previous state has completed successfully.
            - Not Deployed (19) - The status used when a blueprint instance has not had its first deployment. This is useful for persisting a skeleton for an instance before the first deployment of a new blueprint instance.
          example: 2
          enum: [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19]
        lastStatusUpdateTimestamp:
          type: integer
          description: The unix timestamp when the blueprint instance status was last updated.
          example: 1678901234
          nullable: true
        lastDeployedTimestamp:
          type: integer
          description: The unix timestamp when the blueprint instance was last deployed.
          example: 1678901234
        lastDeployAttemptTimestamp:
          type: integer
          description: The unix timestamp for when the last attempt to deploy the blueprint instance was made.
          example: 1678901234
        resourceIds:
          type: object
          description: A mapping of logical resource definition names to the resource IDs that are created from the resource definitions.
          additionalProperties:
            type: string
            description: The ID of the resource.
            example: 60d7c6c5-3984-42b9-a3c1-ae8a47a9bf55
        resources:
          type: object
          description: A mapping of resource IDs to the resource state.
          additionalProperties:
            $ref: '#/components/schemas/ResourceState'
        links:
          type: object
          description: A mapping of logical link definition names to the state of each link in the blueprint instance.
          additionalProperties:
            $ref: '#/components/schemas/LinkState'
        metadata:
          type: object
          description: |
            Metadata that is used to store additional non-structured information
            that is relevant to the Deploy Engine and other tools or applications
            that use blueprints to store information.
          additionalProperties:
            $ref: '#/components/schemas/AnyValue'
        exports:
          type: object
          description: |
            A mapping of export names as defined in the source blueprint
            to the export values created as a result of the deployment of the blueprint instance.
          additionalProperties:
            $ref: '#/components/schemas/ExportState'
        childBlueprints:
          type: object
          description: |
            A mapping of child blueprint instance IDs to the child blueprint instance state.
            This is used to store information about child blueprints that are created
            as part of the deployment of the parent blueprint instance.
          additionalProperties:
            $ref: '#/components/schemas/BlueprintInstance'
        childDependencies:
          type: object
          description: |
            A mapping of child blueprint logical names to their dependencies in the same parent blueprint instance.
          additionalProperties:
            $ref: '#/components/schemas/DependencyInfo'
          nullable: true
        durations:
          type: object
          description: Duration information for the latest deployment of the blueprint instance.
          allOf:
            - $ref: '#/components/schemas/BlueprintInstanceCompletionDurations'
          nullable: true
      example:
        id: a97cf86f-2a5e-4614-984e-da480a0daa7a
        name: my-blueprint-instance
        status: 2
        lastStatusUpdateTimestamp: 1678901234
        lastDeployedTimestamp: 1678901234
        lastDeployAttemptTimestamp: 1678901234
        resourceIds:
          my-resource: 60d7c6c5-3984-42b9-a3c1-ae8a47a9bf55
        resources:
          60d7c6c5-3984-42b9-a3c1-ae8a47a9bf55:
            id: 60d7c6c5-3984-42b9-a3c1-ae8a47a9bf55
            name: my-resource
            type: aws/lambda/function
            instanceId: a97cf86f-2a5e-4614-984e-da480a0daa7a
            status: 2
            preciseStatus: 3
            lastStatusUpdateTimestamp: 1678901234
            lastDeployedTimestamp: 1678901234
            lastDeployAttemptTimestamp: 1678901234
            specData:
              functionName: my-lambda-function
              handler: index.handler
              runtime: nodejs20.x
            metadata:
              displayName: My Lambda Function
              annotations:
                processing: true
              labels:
                processing: true
              custom:
                my-custom-metadata: my-custom-metadata-value
            dependsOnResources:
              - my-other-resource
            dependsOnChildren:
              - my-other-child-blueprint
            failureReasons:
              - The resource could not be created because the IAM role does not exist.
            drifted: true
            lastDriftDetectedTimestamp: 1678901234
            durations:
              configCompleteDuration: 10000.0
              totalDuration: 20000.0
              attemptDurations:
                - 20000.0
        links:
          vpc::subnet:
            id: 60d7c6c5-3984-42b9-a3c1-ae8a47a9bf55
            name: vpc::subnet
            instanceId: a97cf86f-2a5e-4614-984e-da480a0daa7a
            status: 2
            preciseStatus: 3
            lastStatusUpdateTimestamp: 1678901234
            lastDeployAttemptTimestamp: 1678901234
            intermediaryResourceStates: []
            data:
              subnetId: subnet-1234567890abcdef0
              vpcId: vpc-1234567890abcdef0
            failureReasons:
              - The link could not be created because the VPC does not exist.
        metadata: {}
        exports:
          my-export:
            value: arn:aws:lambda:us-east-1:123456789012:function:my-lambda-function
            type: string
            description: The ARN of the lambda function
            field: resources["my-resource"].spec.arn
        childBlueprints: {}
        childDependencies: {}
        durations:
          prepareDuration: 10000.0
          totalDuration: 20000.0

    BlueprintInstanceExports:
      type: object
      description: |
        A mapping of export names as defined in the source blueprint
        to the export values created as a result of the deployment of the blueprint instance.
      additionalProperties:
        $ref: '#/components/schemas/ExportState'
      example:
        my-export:
          value: arn:aws:lambda:us-east-1:123456789012:function:my-lambda-function
          type: string
          description: The ARN of the lambda function
          field: resources["my-resource"].spec.arn

    ExportState:
      type: object
      required:
        - value
        - type
        - field
      properties:
        value:
          description: The value of the exported field.
          allOf:
            - $ref: '#/components/schemas/AnyValue'
        type:
          type: string
          description: The type of the exported field.
          enum:
            - string
            - object
            - integer
            - float
            - array
            - boolean
          example: string
        description:
          type: string
          description: A description of the exported field.
          example: The ARN of the lambda function
          nullable: true
        field:
          type: string
          description: |
            The path of a field in a blueprint element that should be exported.
            This is used to retain information about the source of the export
            from within the blueprint.
          example: resources["my-resource"].spec.arn

    DependencyInfo:
      type: object
      properties:
        dependsOnResources:
          type: array
          description: The names of resources that a child blueprint or resource depends on in the blueprint.
          items:
            type: string
            description: The name of the resource that the child blueprint or resource depends on.
            example: my-other-resource
          nullable: true
        dependsOnChildren:
          type: array
          description: The names of child blueprints that a child blueprint or resource depends on in the blueprint.
          items:
            type: string
            description: The name of the child blueprint that the child blueprint or resource depends on.
            example: my-other-child-blueprint
          nullable: true

    BlueprintInstanceCompletionDurations:
      type: object
      properties:
        prepareDuration:
          type: number
          description: |
            The duration in milliseconds for the preparation phase
            of a blueprint instance deployment to be completed.
          example: 10000.0
          nullable: true
        totalDuration:
          type: number
          description: The duration in milliseconds for the blueprint instance to reach the final status.
          example: 20000.0
          nullable: true

    LinkState:
      type: object
      required:
        - id
        - name
        - instanceId
        - status
        - preciseStatus
        - lastDeployedTimestamp
        - lastDeployAttemptTimestamp
        - intermediaryResourceStates
        - data
        - failureReasons
      properties:
        id:
          type: string
          description: A globally unique identifier for the link.
          example: 60d7c6c5-3984-42b9-a3c1-ae8a47a9bf55
        name:
          type: string
          description: |
            The logical name of the link in the blueprint.
            This is a combination of the logical names of the 2 resources that are linked.
            For example, if a link is between a VPC and a subnet,
            the link name would be "vpc::subnet".
          example: vpc::subnet
        instanceId:
          type: string
          description: The ID of the blueprint instance that the link belongs to.
          example: a97cf86f-2a5e-4614-984e-da480a0daa7a
        status:
          type: integer
          description: |
            The high level status of the link.

            The following high level status codes are supported:

            - Unknown (0) - The status used when we can't determine an accurate status for a link.
            - Creating (1) - The status used when an initial link deployment is currently in progress.
            - Created (2) - The status sed when a link has been deployed successfully.
            - Create Failed (3) - The status used when the first creation of a link has failed.
            - Create Rolling Back (4) - The status used when another change in the same blueprint has failed and the current link that was successfully created is being rolled back.
            - Create Rollback Failed (5) - The status used when another change in the same blueprint has failed and the current link that was successfully created could not be rolled back.
            - Create Rollback Complete (6) - The status used when another change in the same blueprint has failed and the current link that was successfully created has been rolled back.
            - Destroying (7) - The status used when a link is in the process of being destroyed.
            - Destroyed (8) - The status used when a link has been destroyed.
            - Destroy Failed (9) - The status used when the destruction of a link fails.
            - Destroy Rolling Back (10) - The status used when another change in the same blueprint has failed and the current link that was successfully destroyed is being rolled back.
            - Destroy Rollback Failed (11) - The status used when another change in the same blueprint has failed and the current link that was successfully destroyed could not be rolled back.
            - Destroy Rollback Complete (12) - The status used when another change in the same blueprint has failed and the current link that was successfully destroyed has been rolled back.
            - Updating (13) - The status used when a link is being updated.
            - Updated (14) - The status used when a link has been updated successfully.
            - Update Failed (15) - The status used when the update of a link fails.
            - Update Rolling Back (16) - The status used when another change in the same blueprint has failed and the current link that was successfully updated is being rolled back.
            - Update Rollback Failed (17) - The status used when another change in the same blueprint has failed and the current link that was successfully updated could not be rolled back.
            - Update Rollback Complete (18) - The status used when another change in the same blueprint has failed and the current link that was successfully updated has been rolled back.
          example: 2
          enum: [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18]
        preciseStatus:
          type: integer
          description: |
            The precise status of the link.

            The following precise status codes are supported:

            - Unknown (0) - The precise status used when we can't determine an accurate status for a link.
            - Updating Resource A (1) - The precise status used when the configuration for a link is being applied to resource A in the link.
            - Resource A Updated (2) - The precise status used when the configuration for a link has been applied to resource A in the link.
            - Resource A Update Failed (3) - The precise status used when the configuration for a link has failed to be applied to resource A in the link.
            - Resource A Update Rolling Back (4) - The precise status used when another change in the same blueprint has failed and the current link for which resource A was successfully updated is being rolled back.
            - Resource A Update Rollback Failed (5) - The precise status used when another change in the same blueprint has failed and the current link for which resource A was successfully updated could not be rolled back.
            - Resource A Update Rollback Complete (6) - The precise status used when another change in the same blueprint has failed and the current link for which resource A was successfully updated has been rolled back.
            - Updating Resource B (7) - The precise status used when the configuration for a link is being applied to resource B in the link.
            - Resource B Updated (8) - The precise status used when the configuration for a link has been applied to resource B in the link.
            - Resource B Update Failed (9) - The precise status used when the configuration for a link has failed to be applied to resource B in the link.
            - Resource B Update Rolling Back (10) - The precise status used when another change in the same blueprint has failed and the current link for which resource B was successfully updated is being rolled back.
            - Resource B Update Rollback Failed (11) - The precise status used when another change in the same blueprint has failed and the current link for which resource B was successfully updated could not be rolled back.
            - Resource B Update Rollback Complete (12) - The precise status used when another change in the same blueprint has failed and the current link for which resource B was successfully updated has been rolled back.
            - Updating Intermediary Resources (13) - The precise status used when intermediary resources are being created, updated or destroyed. This status is a high level of indication of progress, the status of each intermediary resource should be checked to determine the extract state of each intermediary resource in the link.
            - Intermediary Resources Updated (14) - The precise status used when all intermediary resources have been successfully updated, created or destroyed.
            - Intermediary Resource Update Failed (15) - The precise status used when an intermediary resource has failed to be updated, created or destroyed.
            - Intermediary Resource Update Rolling Back (16) - The precise status used when another change in the same blueprint has failed and the current link for which intermediary resources were successfully updated is being rolled back.
            - Intermediary Resource Update Rollback Failed (17) - The precise status used when another change in the same blueprint has failed and the current link for which intermediary resources were successfully updated failed to be rolled back.
            - Intermediary Resource UpdateRollback Complete (18) - The precise status used when another change in the same blueprint has failed and the current link for which intermediary resources were succesfully updated has been rolled back.
          example: 2
          enum: [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18]
        lastStatusUpdateTimestamp:
          type: integer
          description: The unix timestamp when the link deployment status was last updated.
          example: 1678901234
          nullable: true
        lastDeployedTimestamp:
          type: integer
          description: The unix timestamp when the link was last deployed.
          example: 1678901234
        lastDeployAttemptTimestamp:
          type: integer
          description: The unix timestamp when an attempt was last made to deploy the link.
          example: 1678901234
        intermediaryResourceStates:
          type: array
          description: |
            A list of intermediary resources that are created by a provider's implementation of a link.
          items:
            $ref: '#/components/schemas/LinkIntermediaryResourceState'
        data:
          type: object
          description: |
            An object that holds the "raw" link data that is a projection of the data that is stored
            across the 2 resources that are linked together along with optional intermediary resources.
          additionalProperties:
            $ref: '#/components/schemas/AnyValue'
        failureReasons:
          type: array
          description: The reasons why the link deployment has failed, if applicable.
          items:
            type: string
            description: The reason why the link deployment has failed.
            example: The link could not be created because the IAM role does not exist.
        durations:
          type: object
          description: Duration information for the latest deployment of the link.
          allOf:
            - $ref: '#/components/schemas/LinkCompletionDurations'
          nullable: true

    LinkIntermediaryResourceState:
      type: object
      required:
        - id
        - instanceId
        - status
        - preciseStatus
        - lastDeployedTimestamp
        - lastDeployAttemptTimestamp
        - resourceSpecData
      properties:
        id:
          type: string
          description: The ID of the intermediary resource.
          example: 60d7c6c5-3984-42b9-a3c1-ae8a47a9bf55
        instanceId:
          type: string
          description: The ID of the blueprint instance that the intermediary resource belongs to.
          example: a97cf86f-2a5e-4614-984e-da480a0daa7a
        status:
          type: integer
          description: |
            The high level status of the intermediary resource.

            See the status codes for the `ResourceState` schema definition for what each status means.
          example: 2
          enum: [0,1,2,3,4,5,6,7,8,9,10,11,12]
        preciseStatus:
          type: integer
          description: |
            The precise status of the intermediary resource.

            See the precise status codes for the `ResourceState` schema definition for what each status means.
          example: 3
          enum: [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22]
        lastDeployedTimestamp:
          type: integer
          description: The unix timestamp when the intermediary resource was last deployed.
          example: 1678901234
        lastDeployAttemptTimestamp:
          type: integer
          description: The unix timestamp when the last attempt was made to deploy the intermediary resource.
          example: 1678901234
        resourceSpecData:
          type: object
          description: |
            The resolved resource spec for the intermediary resource that is generated by a provider's
            implementation of a link based on link data derived from the two primary resources that
            are linked together and rules in the link implementation.
          additionalProperties:
            $ref: '#/components/schemas/AnyValue'
          example:
            functionName: my-lambda-function
            handler: index.handler
            runtime: nodejs20.x
            arn: arn:aws:lambda:us-east-1:123456789012:function:my-lambda-function
        failureReasons:
          type: array
          description: The reasons why the intermediary resource deployment has failed, if applicable.
          items:
            type: string
            description: The reason why the intermediary resource deployment has failed.
            example: The intermediary resource could not be created because the IAM role does not exist.
          nullable: true

    LinkCompletionDurations:
      type: object
      properties:
        resourceAUpdate:
          type: object
          description: |
            Duration information for the update of resource A in the link.
            This will only be present if the link has reached resource A updated status.
          allOf:
            - $ref: '#/components/schemas/LinkComponentCompletionDurations'
          nullable: true
        resourceBUpdate:
          type: object
          description: |
            Duration information for the update of resource B in the link.
            This will only be present if the link has reached resource B updated status.
          allOf:
            - $ref: '#/components/schemas/LinkComponentCompletionDurations'
          nullable: true
        intermediaryResources:
          type: object
          description: |
            Duration information for the update, creation or removal of intermediary
            resources in the link.
            This will only be present if the link has reached intermediary resources updated status.
          allOf:
            - $ref: '#/components/schemas/LinkComponentCompletionDurations'
          nullable: true

    LinkComponentCompletionDurations:
      type: object
      properties:
        totalDuration:
          type: number
          description: The duration in milliseconds for the link component change to reach the final status.
          example: 20000.0
          nullable: true
        attemptDurations:
          type: array
          description: |
            The durations in milliseconds for each attempt to deploy the link component.
            Attempt durations are in order as per the "attempt" field in a status update event.
          items:
            type: number
            description: The duration in milliseconds for the attempt to deploy the link component.
            example: 20000.0

    UnexpectedError:
      type: object
      properties:
        message:
          type: string
          example: An unexpected error occurred
      required:
        - message

    UnauthorisedError:
      type: object
      properties:
        message:
          type: string
          example: Unauthorized
      required:
        - message

    BadRequestError:
      type: object
      properties:
        message:
          type: string
          example: Bad request
      required:
        - message

    UnprocessableEntityError:
      type: object
      required:
        - message
      properties:
        message:
          type: string
          example: Input validation failed
        errors:
          type: array
          description: |
            A list of input validation errors, specifying the location and
            type of error.
          items:
            type: object
            required:
              - location
              - message
              - type
            properties:
              location:
                type: string
                description: The location of the error in the request.
                example: body
              message:
                type: string
                description: A message describing the error.
                example: "Value must be one of the following: [aws, azure]"
              type:
                type: string
                description: The type of error.
                example: oneof
        validationDiagnostics:
          type: array
          description: |
            A list of validation diagnostics that provide additional information
            about validation errors that occurred as a part of loading the source
            blueprint document specified in the request.
          items:
            $ref: '#/components/schemas/Diagnostic'

    NotFoundError:
      type: object
      properties:
        message:
          type: string
          example: Not found
      required:
        - message

    CleanupStartedResponse:
      type: object
      required:
        - message
      properties:
        message:
          type: string
          example: Cleanup started

    BlueprintLocationMetadata: 
      type: object
      description: |
        Additional metadata about the location of the blueprint document.
        For example, this can be used to specify the region of the bucket or container
        where the blueprint document is located in a cloud object storage service.
        This only supports scalar values.
      additionalProperties:
        oneOf:
          - type: string
            description: The string value for a metadata property.
            example: us-east-1
          - type: number
            description: The numeric value for a metadata property.
            example: 1.0
          - type: boolean
            description: The boolean value for a metadata property.
            example: true
        description: The value of the metadata property.
        example: us-east-1
      example:
        region: us-east-1

    Config:
      type: object
      description: |
        Configuration used for carrying out actions for blueprints.
        This consists of environment configuration (context-wide),
        provider and transformer plugin specific configuration
        along with blueprint variables.
      properties:
        providers:
          type: object
          additionalProperties:
            type: object
            description: |
              Configuration for a provider plugin.
              This is used to configure a specific provider plugin
              when carrying out specific actions for a blueprint.
            additionalProperties:
              $ref: '#/components/schemas/ScalarValue'
        transformers:
          type: object
          additionalProperties:
            type: object
            description: |
              Configuration for a transformer plugin.
              This is used to configure a specific transformer plugin
              when carrying out specific actions for a blueprint.
            additionalProperties:
              $ref: '#/components/schemas/ScalarValue'
        contextVariables:
          type: object
          description: |
            Context variables that provide information that can be used across
            components of the blueprint validation, change staging and deployment processes.
          additionalProperties:
            $ref: '#/components/schemas/ScalarValue'
        blueprintVariables:
          type: object
          description: |
            Blueprint variables that are expected to match the variables
            defined in the source blueprint document an action is being carried out for.
            When evaluating a blueprint document, variables will be derived from
            the variables defined in this object.
          additionalProperties:
            $ref: '#/components/schemas/ScalarValue'
      example:
        providers:
          aws:
            accessKeyId: my-access-key-id
            secretAccessKey: secret-access-key
        transformers:
          celerity-transform:
            deployTarget: aws-serverless
        contextVariables:
          myConfigKey: my-config-value
        blueprintVariables:
          region: us-east-1

    AnyValue:
      description: |
        A value of any type, can be a string, number, boolean, object or array.
      
    ScalarValue:
      description: |
        A scalar value type, can be a string, number or boolean.
      oneOf:
        - type: string
          description: The string value.
          example: my-string-value
        - type: number
          description: The numeric value.
          example: 1.0
        - type: boolean
          description: The boolean value.
          example: true

  requestBodies:
    CreateBlueprintValidationBody:
      description: Payload for creating a new blueprint validation.
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BlueprintValidationPayload'

    CreateChangeSetBody:
      description: Payload for creating a new change set.
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CreateChangeSetPayload'

    CreateBlueprintInstanceBody:
      description: Payload for creating a new blueprint instance.
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CreateBlueprintInstancePayload'

    UpdateBlueprintInstanceBody:
      description: Payload for updating an existing blueprint instance.
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UpdateBlueprintInstancePayload'

    DestroyBlueprintInstanceBody:
      description: Payload for destroying an existing blueprint instance.
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/DestroyBlueprintInstancePayload'

  examples:
    changeSetChangesExample:
      newResources:
        my-new-resource:
          appliedResourceInfo:
            resourceId: ""
            resourceName: my-new-resource
            instanceId: ""
            currentResourceState: {}
            resourceWithResolvedSubs: {}
          mustRecreate: false
          modifiedFields: []
          newFields: []
          removedFields: []
          unchangedFields: []
          computedFields: []
          fieldChangesKnownOnDeploy: false
          conditionKnownOnDeploy: false
          newOutboundLinks: []
          outboundLinkChanges: []
          removedOutboundLinks: []
      resourceChanges:
        my-existing-resource:
          appliedResourceInfo:
            resourceId: 60d7c6c5-3984-42b9-a3c1-ae8a47a9bf55
            resourceName: my-existing-resource
            instanceId: a97cf86f-2a5e-4614-984e-da480a0daa7a
            currentResourceState:
              resourceId: 60d7c6c5-3984-42b9-a3c1-ae8a47a9bf55
              name: my-existing-resource
              type: "aws/lambda/function"
              instanceId: a97cf86f-2a5e-4614-984e-da480a0daa7a
              status: 2
              preciseStatus: 3
              lastStatusUpdateTimestamp: 1678901234
              lastDeployedTimestamp: 1678901234
              lastDeployAttemptTimestamp: 1678901234
              specData:
                functionName: my-lambda-function
                handler: index.handler
                runtime: nodejs20.x
                arn: arn:aws:lambda:us-east-1:123456789012:function:my-lambda-function
              description: A lambda function for processing events
              metadata:
                displayName: My Lambda Function
                annotations: {}
                labels:
                  system: processing
                custom:
                  owner: celerity
                  version: 1.0.0
              dependsOnResources: []
              dependsOnChildren: []
              failureReasons: []
              drifted: false
              durations:
                configCompleteDuration: 10000.0
                totalDuration: 20000.0
                attemptDurations: [20000.0]
            resourceWithResolvedSubs:
              type: "aws/lambda/function"
              description: A lambda function for processing events
              metadata:
                displayName: My Lambda Function Updated
                annotations: {}
                labels:
                  system: processing2
                custom:
                  owner: celerity
                  version: 1.0.0
              spec:
                functionName: my-lambda-function
                handler: index.handlerUpdated
                runtime: nodejs20.x
          mustRecreate: false
          modifiedFields:
            - field1
          newFields: []
          removedFields: []
          unchangedFields:
            - field2
          computedFields:
            - field3
          fieldChangesKnownOnDeploy: true
          conditionKnownOnDeploy: false
          newOutboundLinks: []
          outboundLinkChanges: []
          removedOutboundLinks: []
      removedResources:
        - my-old-resource
      removedLinks:
        - my-old-link
      newChildren:
        my-new-child:
          newResources:
            my-new-resource:
              appliedResourceInfo:
                resourceId: ""
                resourceName: my-new-resource
                instanceId: ""
                currentResourceState: {}
                resourceWithResolvedSubs: {}
              mustRecreate: false
              modifiedFields: []
              newFields: []
              removedFields: []
              unchangedFields: []
              computedFields: []
              fieldChangesKnownOnDeploy: false
              conditionKnownOnDeploy: false
              newOutboundLinks: []
              outboundLinkChanges: []
              removedOutboundLinks: []
          newChildren: {}
          newExports:
            my-new-export:
              fieldPath: my-new-export
              prevValue: ""
              newValue: my-new-export
              mustRecreate: false
      childChanges: {}
      recreateChildren:
        - another-child-blueprint
      removedChildren:
        - old-child-blueprint
      newExports:
        parent-new-export:
          fieldPath: parent-new-export
          prevValue: ""
          newValue: parent-new-export
          mustRecreate: false
      exportChanges:
        parent-existing-export:
          fieldPath: parent-existing-export
          prevValue: old-value
          newValue: new-value
          mustRecreate: false
      unchangedExports:
        - parent-unchanged-export
      removedExports:
        - parent-removed-export
      metadataChanges:
        newFields:
          - fieldPath: metadata.new-field
            prevValue: ""
            newValue: new-value
            mustRecreate: false
        modifiedFields:
          - fieldPath: metadata.modified-field
            prevValue: old-value
            newValue: new-value
            mustRecreate: false
        unchangedFields:
          - metadata.unchanged-field
        removedFields:
          - metadata.removed-field
      resolveOnDeploy:
        - "resources[\"my-new-resource\"].spec.field1"
        - "resources[\"my-existing-resource\"].spec.field2"

  securitySchemes:
    oauth_jwt:
      type: oauth2
      description: |
        OAuth2/OIDC auth using JWT Bearer tokens.
        The token issuer will be configured independently for each Deploy Engine instance.
      flows:
        clientCredentials:
          tokenUrl: "[issuerTokenEndpoint]"
          scopes: {}
    api_key:
      type: apiKey
      description: |
        An API key is a secret token that can be used to authenticate with the Deploy Engine.
        The API key must be included in the request header as `Celerity-Api-Key`,
        known API keys are configured with an instance of the Deploy Engine.
      name: Celerity-Api-Key
      in: header